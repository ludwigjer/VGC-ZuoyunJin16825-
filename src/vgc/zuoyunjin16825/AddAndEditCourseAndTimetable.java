/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vgc.zuoyunjin16825;

import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @ZuoyunJin16825
 */
public class AddAndEditCourseAndTimetable extends javax.swing.JFrame implements ProgramInterface{

    /**
     * Creates new form AddAndEditCourse
     */
    public AddAndEditCourseAndTimetable() {
        initComponents();
        showCoursesData();
    }

    public Connection getConnection() {
        try {
            String dbUrl = "jdbc:mysql://localhost:3306/vgc?useSSL=false";
            String userid = "root";
            String userps = "P6agztsg";
            Connection myConn = DriverManager.getConnection(dbUrl, userid, userps);
            return myConn;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public ArrayList<coursesData> coursesList() {
        ArrayList<coursesData> coursesList = new ArrayList();
        Connection myConn = getConnection();
        String sql = "Select Courses.*,Timetable.BranchesID, Timetable.FacultyID,Timetable.Mon,Timetable.Tues,Timetable.Wed,Timetable.Thur,Timetable.Fri from Timetable INNER JOIN Courses ON Timetable.CoursesID = Courses.CoursesID";

        try {
            Statement myStmt = myConn.createStatement();
            ResultSet myRs = myStmt.executeQuery(sql);
            coursesData coursesDataTable;
            while (myRs.next()) {
                coursesDataTable = new coursesData(myRs.getInt("CoursesID"), myRs.getString("CoursesName"), myRs.getInt("FacultyID"), myRs.getInt("BranchesID"), myRs.getString("Mon"), myRs.getString("Tues"), myRs.getString("Wed"), myRs.getString("Thur"), myRs.getString("Fri"));
                coursesList.add(coursesDataTable);
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return coursesList;
    }

    public void showCoursesData() {
        ArrayList<coursesData> list = coursesList();
        DefaultTableModel model = (DefaultTableModel) coursesTimeTable.getModel();
        Object[] row = new Object[9];
        for (int i = 0; i < list.size(); i++) {
            row[0] = list.get(i).getCID();
            row[1] = list.get(i).getCNA();
            row[2] = list.get(i).getFID();
            row[3] = list.get(i).getBID();
            row[4] = list.get(i).getMON();
            row[5] = list.get(i).getTUES();
            row[6] = list.get(i).getWED();
            row[7] = list.get(i).getTHUR();
            row[8] = list.get(i).getFRI();
            model.addRow(row);
        }
    }

    public void refreshTableData(String message) {
        // refresh jtable data
        DefaultTableModel model = (DefaultTableModel) coursesTimeTable.getModel();
        model.setRowCount(0);
        showCoursesData();

        JOptionPane.showMessageDialog(null, "Data " + message + " Succefully");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        coursesTimeTable = new javax.swing.JTable();
        Insert = new javax.swing.JButton();
        Update = new javax.swing.JButton();
        Reset = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        Back = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        CID = new javax.swing.JTextField();
        CNA = new javax.swing.JTextField();
        FID = new javax.swing.JTextField();
        BID = new javax.swing.JTextField();
        MON = new javax.swing.JTextField();
        TUES = new javax.swing.JTextField();
        WED = new javax.swing.JTextField();
        THUR = new javax.swing.JTextField();
        FRI = new javax.swing.JTextField();
        CIDC = new javax.swing.JLabel();
        CNAC = new javax.swing.JLabel();
        FIDC = new javax.swing.JLabel();
        BIDC = new javax.swing.JLabel();
        MONC = new javax.swing.JLabel();
        TUESC = new javax.swing.JLabel();
        WEDC = new javax.swing.JLabel();
        THURC = new javax.swing.JLabel();
        FRIC = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        coursesTimeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CoursesID", "CoursesName", "FacultyID", "BranchesID", "Mon", "Tues", "Wed", "Thur", "Fri"
            }
        ));
        coursesTimeTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                coursesTimeTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(coursesTimeTable);

        Insert.setText("Insert");
        Insert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertActionPerformed(evt);
            }
        });

        Update.setText("Update");
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });

        Reset.setText("Reset");
        Reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetActionPerformed(evt);
            }
        });

        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        Back.setText("Back");
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Add New Courses&Timetable By Entering The Detail Below");

        jLabel2.setText("Enter CoursesID");

        jLabel3.setText("Enter CoursesName");

        jLabel4.setText("Enter FacultyID");

        jLabel5.setText("Enter BranchesID");

        jLabel6.setText("Mon(Y/N)");

        jLabel7.setText("Tues(Y/N)");

        jLabel8.setText("Wed(Y/N)");

        jLabel9.setText("Thur(Y/N)");

        jLabel10.setText("Fri(Y/N)");

        CID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CIDActionPerformed(evt);
            }
        });

        CNA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CNAActionPerformed(evt);
            }
        });

        FID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FIDActionPerformed(evt);
            }
        });

        BID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BIDActionPerformed(evt);
            }
        });

        MON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MONActionPerformed(evt);
            }
        });

        TUES.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TUESActionPerformed(evt);
            }
        });

        WED.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WEDActionPerformed(evt);
            }
        });

        THUR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                THURActionPerformed(evt);
            }
        });

        FRI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FRIActionPerformed(evt);
            }
        });

        CIDC.setText("No more than 4 numbers");

        CNAC.setText("No more than 40 CH");

        FIDC.setText("No more than 6 numbers");

        BIDC.setText("No more than 2 numbers");

        MONC.setText("Y/N only");

        TUESC.setText("Y/N only");

        WEDC.setText("Y/N only");

        THURC.setText("Y/N only");

        FRIC.setText("Y/N only");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel9)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(Insert)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(MON, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(THUR, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(59, 59, 59)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel7)
                                                .addComponent(jLabel10)))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(46, 46, 46)
                                            .addComponent(Update)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(MONC)
                                            .addComponent(THURC))
                                        .addGap(107, 107, 107)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(50, 50, 50)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(FRI, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(TUES, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(TUESC)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(15, 15, 15)
                                        .addComponent(Reset))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(FRIC)
                                        .addGap(1, 1, 1)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(74, 74, 74)
                                        .addComponent(jLabel8))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Delete)
                                        .addGap(13, 13, 13)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(31, 31, 31)
                                        .addComponent(Back, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(WEDC)
                                            .addComponent(WED, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(8, 8, 8))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(CIDC)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(CNA, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(CID, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(FID, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(BID, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(CNAC)
                                    .addComponent(FIDC)
                                    .addComponent(BIDC)))))
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 676, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CIDC)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(CNA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addComponent(CNAC)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(FID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(3, 3, 3)
                        .addComponent(FIDC)
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(BID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BIDC)
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(MON, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(TUES, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(WED, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(MONC)
                            .addComponent(TUESC)
                            .addComponent(WEDC))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(THUR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(FRI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(THURC)
                            .addComponent(FRIC))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Update)
                            .addComponent(Reset)
                            .addComponent(Delete)
                            .addComponent(Back)
                            .addComponent(Insert))))
                .addContainerGap(56, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void InsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertActionPerformed
        if (FID.getText().isEmpty() || BID.getText().isEmpty() || FID.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "CoursesID,FacultyID and BranchesID CAN NOT BE NULL");
        } else {
            Connection myConn = getConnection();
            String sql = "insert into Timetable values (?,?,?,?,?,?,?,?)";
            String sql2 = "insert into Courses values(?,?)";

            Pattern pBID = Pattern.compile("\\d{1,2}");
            Matcher mBID = pBID.matcher(BID.getText());
            boolean isBIDValid = mBID.matches();

            Pattern pCID = Pattern.compile("\\d{1,4}");
            Matcher mCID = pCID.matcher(CID.getText());
            boolean isCIDValid = mCID.matches();

            Pattern pFID = Pattern.compile("\\d{1,6}");
            Matcher mFID = pFID.matcher(FID.getText());
            boolean isFIDValid = mFID.matches();

            Pattern pCNA = Pattern.compile(".{1,40}");
            Matcher mCNA = pCNA.matcher(CNA.getText());
            boolean isCNAValid = mCNA.matches();

            Pattern pMON = Pattern.compile("[Y|N|y|n]{1}");
            Matcher mMON = pMON.matcher(MON.getText());
            boolean isMONValid = mMON.matches();

            Pattern pTUES = Pattern.compile("[Y|N|y|n]{1}");
            Matcher mTUES = pTUES.matcher(TUES.getText());
            boolean isTUESValid = mTUES.matches();

            Pattern pWED = Pattern.compile("[Y|N|y|n]{1}");
            Matcher mWED = pWED.matcher(WED.getText());
            boolean isWEDValid = mWED.matches();

            Pattern pTHUR = Pattern.compile("[Y|N|y|n]{1}");
            Matcher mTHUR = pTHUR.matcher(THUR.getText());
            boolean isTHURValid = mTHUR.matches();

            Pattern pFRI = Pattern.compile("[Y|N|y|n]{1}");
            Matcher mFRI = pFRI.matcher(FRI.getText());
            boolean isFRIValid = mFRI.matches();

            if (isBIDValid) {
                BIDC.setText("Valid");
                BIDC.setForeground(Color.BLUE);
            } else {
                BIDC.setText("InValid (1 - 2 DECIMAL Only)");
                BIDC.setForeground(Color.red);
            }
            if (isCIDValid) {
                CIDC.setText("Valid");
                CIDC.setForeground(Color.BLUE);
            } else {
                CIDC.setText("InValid (1 - 4 DECIMAL Only)");
                CIDC.setForeground(Color.red);
            }
            if (isFIDValid) {
                FIDC.setText("Valid");
                FIDC.setForeground(Color.BLUE);
            } else {
                FIDC.setText("InValid (1 - 6 DECIMAL Only)");
                FIDC.setForeground(Color.red);
            }
            if (isCNAValid) {
                CNAC.setText("Valid");
                CNAC.setForeground(Color.BLUE);
            } else {
                CNAC.setText("1 - 40 Charactors Only)");
                CNAC.setForeground(Color.red);
            }

            if (isMONValid) {
                MONC.setText("Valid");
                MONC.setForeground(Color.BLUE);
            } else {
                MONC.setText("InValid (Y/N only)");
                MONC.setForeground(Color.red);
            }
            if (isTUESValid) {
                TUESC.setText("Valid");
                TUESC.setForeground(Color.BLUE);
            } else {
                TUESC.setText("InValid (Y/N only)");
                TUESC.setForeground(Color.red);
            }
            if (isWEDValid) {
                WEDC.setText("Valid");
                WEDC.setForeground(Color.BLUE);
            } else {
                WEDC.setText("InValid (Y/N only)");
                WEDC.setForeground(Color.red);
            }
            if (isTHURValid) {
                THURC.setText("Valid");
                THURC.setForeground(Color.BLUE);
            } else {
                THURC.setText("InValid (Y/N only)");
                THURC.setForeground(Color.red);
            }
            if (isFRIValid) {
                FRIC.setText("Valid");
                FRIC.setForeground(Color.BLUE);
            } else {
                FRIC.setText("InValid (Y/N only)");
                FRIC.setForeground(Color.red);
            }

            if (isBIDValid && isFRIValid && isTHURValid && isWEDValid && isTUESValid && isMONValid && isCNAValid && isFIDValid && isCIDValid) {

                try {

                    PreparedStatement pst = myConn.prepareStatement(sql);
                    PreparedStatement pst2 = myConn.prepareStatement(sql2);
                    pst.setString(1, CID.getText().trim());
                    pst.setString(2, FID.getText().trim());
                    pst.setString(3, MON.getText().trim());
                    pst.setString(4, TUES.getText().trim());
                    pst.setString(5, WED.getText().trim());
                    pst.setString(6, THUR.getText().trim());
                    pst.setString(7, FRI.getText().trim());
                    pst.setString(8, BID.getText().trim());
                    pst2.setString(1, CID.getText().trim());
                    pst2.setString(2, CNA.getText().trim());
                    pst2.executeUpdate();
                    pst.executeUpdate();
                    refreshTableData("Updated");
                } catch (Exception exc) {
                    JOptionPane.showMessageDialog(null, exc);
                }

            }
        }
    }//GEN-LAST:event_InsertActionPerformed

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
        if (FID.getText().isEmpty() || BID.getText().isEmpty() || FID.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "CoursesID,FacultyID and BranchesID CAN NOT BE NULL");
        } else {
            Connection myConn = getConnection();
            String sql = "Update Timetable set CoursesID= ? ,FacultyID = ? , Mon = ? , Tues = ? ,Wed = ? , Thur = ? , Fri = ? , BranchesID = ? where CoursesID= ?";
            String sql2 = "Update Courses set CoursesID= ? , CoursesName = ?  where CoursesID= ?";
            Pattern pBID = Pattern.compile("\\d{1,2}");
            Matcher mBID = pBID.matcher(BID.getText());
            boolean isBIDValid = mBID.matches();

            Pattern pCID = Pattern.compile("\\d{1,4}");
            Matcher mCID = pCID.matcher(CID.getText());
            boolean isCIDValid = mCID.matches();

            Pattern pFID = Pattern.compile("\\d{1,6}");
            Matcher mFID = pFID.matcher(FID.getText());
            boolean isFIDValid = mFID.matches();

            Pattern pCNA = Pattern.compile(".{1,40}");
            Matcher mCNA = pCNA.matcher(CNA.getText());
            boolean isCNAValid = mCNA.matches();

            Pattern pMON = Pattern.compile("[Y|N|y|n]{1}");
            Matcher mMON = pMON.matcher(MON.getText());
            boolean isMONValid = mMON.matches();

            Pattern pTUES = Pattern.compile("[Y|N|y|n]{1}");
            Matcher mTUES = pTUES.matcher(TUES.getText());
            boolean isTUESValid = mTUES.matches();

            Pattern pWED = Pattern.compile("[Y|N|y|n]{1}");
            Matcher mWED = pWED.matcher(WED.getText());
            boolean isWEDValid = mWED.matches();

            Pattern pTHUR = Pattern.compile("[Y|N|y|n]{1}");
            Matcher mTHUR = pTHUR.matcher(THUR.getText());
            boolean isTHURValid = mTHUR.matches();

            Pattern pFRI = Pattern.compile("[Y|N|y|n]{1}");
            Matcher mFRI = pFRI.matcher(FRI.getText());
            boolean isFRIValid = mFRI.matches();

            if (isBIDValid) {
                BIDC.setText("Valid");
                BIDC.setForeground(Color.BLUE);
            } else {
                BIDC.setText("InValid (1 - 2 DECIMAL Only)");
                BIDC.setForeground(Color.red);
            }
            if (isCIDValid) {
                CIDC.setText("Valid");
                CIDC.setForeground(Color.BLUE);
            } else {
                CIDC.setText("InValid (1 - 4 DECIMAL Only)");
                CIDC.setForeground(Color.red);
            }
            if (isFIDValid) {
                FIDC.setText("Valid");
                FIDC.setForeground(Color.BLUE);
            } else {
                FIDC.setText("InValid (1 - 6 DECIMAL Only)");
                FIDC.setForeground(Color.red);
            }
            if (isCNAValid) {
                CNAC.setText("Valid");
                CNAC.setForeground(Color.BLUE);
            } else {
                CNAC.setText("1 - 40 Charactors Only)");
                CNAC.setForeground(Color.red);
            }

            if (isMONValid) {
                MONC.setText("Valid");
                MONC.setForeground(Color.BLUE);
            } else {
                MONC.setText("InValid (Y/N only)");
                MONC.setForeground(Color.red);
            }
            if (isTUESValid) {
                TUESC.setText("Valid");
                TUESC.setForeground(Color.BLUE);
            } else {
                TUESC.setText("InValid (Y/N only)");
                TUESC.setForeground(Color.red);
            }
            if (isWEDValid) {
                WEDC.setText("Valid");
                WEDC.setForeground(Color.BLUE);
            } else {
                WEDC.setText("InValid (Y/N only)");
                WEDC.setForeground(Color.red);
            }
            if (isTHURValid) {
                THURC.setText("Valid");
                THURC.setForeground(Color.BLUE);
            } else {
                THURC.setText("InValid (Y/N only)");
                THURC.setForeground(Color.red);
            }
            if (isFRIValid) {
                FRIC.setText("Valid");
                FRIC.setForeground(Color.BLUE);
            } else {
                FRIC.setText("InValid (Y/N only)");
                FRIC.setForeground(Color.red);
            }

            if (isBIDValid && isFRIValid && isTHURValid && isWEDValid && isTUESValid && isMONValid && isCNAValid && isFIDValid && isCIDValid) {

                try {

                    PreparedStatement pst = myConn.prepareStatement(sql);
                    PreparedStatement pst2 = myConn.prepareStatement(sql2);
                    pst.setString(1, CID.getText().trim());
                    pst.setString(2, FID.getText().trim());
                    pst.setString(3, MON.getText().trim());
                    pst.setString(4, TUES.getText().trim());
                    pst.setString(5, WED.getText().trim());
                    pst.setString(6, THUR.getText().trim());
                    pst.setString(7, FRI.getText().trim());
                    pst.setString(8, BID.getText().trim());
                    pst.setString(9, CID.getText().trim());
                    pst2.setString(1, CID.getText().trim());
                    pst2.setString(2, CNA.getText().trim());
                    pst2.setString(3, CID.getText().trim());
                    pst2.executeUpdate();
                    pst.executeUpdate();
                    refreshTableData("Updated");
                } catch (Exception exc) {
                    JOptionPane.showMessageDialog(null, exc);
                }
            }
        }
    }//GEN-LAST:event_UpdateActionPerformed

    private void ResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetActionPerformed
        CID.setText("");
        CNA.setText("");
        BID.setText("");
        FID.setText("");
        MON.setText("");
        TUES.setText("");
        WED.setText("");
        THUR.setText("");
        FRI.setText("");
    }//GEN-LAST:event_ResetActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        Connection myConn = getConnection();
        String sql3 = "Delete From ExamsGradeBook WHERE CoursesID = ?";
        String sql4 = "Delete From AssignmentsGradeBook WHERE CoursesID = ?";
        String sql = "Delete From Courses WHERE CoursesID = ?";
        String sql2 = "Delete From Timetable WHERE CoursesID = ?";
        try {
            PreparedStatement pst3 = myConn.prepareStatement(sql3);
            PreparedStatement pst4 = myConn.prepareStatement(sql4);
            PreparedStatement pst = myConn.prepareStatement(sql);
            PreparedStatement pst2 = myConn.prepareStatement(sql2);
            pst.setString(1, CID.getText().trim());
            pst2.setString(1, CID.getText().trim());
            pst3.setString(1, CID.getText().trim());
            pst4.setString(1, CID.getText().trim());
            pst3.executeUpdate();
            pst4.executeUpdate();
            pst2.executeUpdate();
            pst.executeUpdate();
            refreshTableData("Deleted!");
        } catch (Exception exc) {
            exc.printStackTrace();
        }
    }//GEN-LAST:event_DeleteActionPerformed

    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed
        new Menu().setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_BackActionPerformed

    private void CIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CIDActionPerformed

    private void CNAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CNAActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CNAActionPerformed

    private void FIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FIDActionPerformed

    private void BIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BIDActionPerformed

    private void MONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MONActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MONActionPerformed

    private void TUESActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TUESActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TUESActionPerformed

    private void WEDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WEDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_WEDActionPerformed

    private void THURActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_THURActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_THURActionPerformed

    private void FRIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FRIActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FRIActionPerformed

    private void coursesTimeTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_coursesTimeTableMouseClicked
        // Get The Index Of The Slected Row 
        int i = coursesTimeTable.getSelectedRow();

        TableModel model = coursesTimeTable.getModel();

        // Display Slected Row In JTexteFields
        CID.setText(model.getValueAt(i, 0).toString());

        CNA.setText(model.getValueAt(i, 1).toString());

        FID.setText(model.getValueAt(i, 2).toString());

        BID.setText(model.getValueAt(i, 3).toString());

        MON.setText(model.getValueAt(i, 4).toString());

        TUES.setText(model.getValueAt(i, 5).toString());

        WED.setText(model.getValueAt(i, 6).toString());

        THUR.setText(model.getValueAt(i, 7).toString());

        FRI.setText(model.getValueAt(i, 8).toString());


    }//GEN-LAST:event_coursesTimeTableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddAndEditCourseAndTimetable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddAndEditCourseAndTimetable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddAndEditCourseAndTimetable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddAndEditCourseAndTimetable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddAndEditCourseAndTimetable().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField BID;
    private javax.swing.JLabel BIDC;
    private javax.swing.JButton Back;
    private javax.swing.JTextField CID;
    private javax.swing.JLabel CIDC;
    private javax.swing.JTextField CNA;
    private javax.swing.JLabel CNAC;
    private javax.swing.JButton Delete;
    private javax.swing.JTextField FID;
    private javax.swing.JLabel FIDC;
    private javax.swing.JTextField FRI;
    private javax.swing.JLabel FRIC;
    private javax.swing.JButton Insert;
    private javax.swing.JTextField MON;
    private javax.swing.JLabel MONC;
    private javax.swing.JButton Reset;
    private javax.swing.JTextField THUR;
    private javax.swing.JLabel THURC;
    private javax.swing.JTextField TUES;
    private javax.swing.JLabel TUESC;
    private javax.swing.JButton Update;
    private javax.swing.JTextField WED;
    private javax.swing.JLabel WEDC;
    private javax.swing.JTable coursesTimeTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
