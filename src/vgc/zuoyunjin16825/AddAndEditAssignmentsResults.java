/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vgc.zuoyunjin16825;

import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @ZuoyunJin16825
 */
public class AddAndEditAssignmentsResults extends javax.swing.JFrame implements ProgramInterface{

    /**
     * Creates new form AddAndEditExamsResults
     */
    public AddAndEditAssignmentsResults() {
        initComponents();
        showExamData();
    }

    public Connection getConnection() {
        try {
            String dbUrl = "jdbc:mysql://localhost:3306/vgc?useSSL=false";
            String userid = "root";
            String userps = "P6agztsg";
            Connection myConn = DriverManager.getConnection(dbUrl, userid, userps);
            return myConn;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public ArrayList<AssignmentsData> AssignmentsList() {
        ArrayList<AssignmentsData> AssignmentsList = new ArrayList();
        Connection myConn = getConnection();
        String sql = "Select * from AssignmentsGradeBook";
        try {
            Statement myStmt = myConn.createStatement();
            ResultSet myRs = myStmt.executeQuery(sql);
            AssignmentsData AssignmentsDataTable;
            while (myRs.next()) {

                AssignmentsDataTable = new AssignmentsData(myRs.getInt("StudentID"), myRs.getInt("CoursesID"), myRs.getString("AssignmentsDate"), myRs.getInt("AssignmentsResults"));
                AssignmentsList.add(AssignmentsDataTable);
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return AssignmentsList;
    }

    public void refreshTableData(String message) {
        // refresh jtable data
        DefaultTableModel model = (DefaultTableModel) AssignmentTable.getModel();
        model.setRowCount(0);
        showExamData();

        JOptionPane.showMessageDialog(null, "Data " + message + " Succefully");
    }

    public void showExamData() {
        ArrayList<AssignmentsData> list = AssignmentsList();
        DefaultTableModel model = (DefaultTableModel) AssignmentTable.getModel();
        Object[] row = new Object[4];
        for (int i = 0; i < list.size(); i++) {
            row[0] = list.get(i).getSID();
            row[1] = list.get(i).getCID();
            row[2] = list.get(i).getAMD();
            row[3] = list.get(i).getAMR();
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        AssignmentTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        Insert = new javax.swing.JButton();
        Update = new javax.swing.JButton();
        Reset = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        Back = new javax.swing.JButton();
        SID = new javax.swing.JTextField();
        CID = new javax.swing.JTextField();
        AMD = new javax.swing.JTextField();
        AMR = new javax.swing.JTextField();
        SIDC = new javax.swing.JLabel();
        CIDC = new javax.swing.JLabel();
        AMDC = new javax.swing.JLabel();
        AMRC = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Add Exam Result By Entering The Detail Below");

        AssignmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "StudentID", "CoursesID", " AssignmentDate", " AssignmentResults"
            }
        ));
        AssignmentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AssignmentTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(AssignmentTable);

        jLabel2.setText("Enter StudentID");

        jLabel3.setText("Enter CoursesID");

        jLabel4.setText("Enter Assignment Date (YYYY-MM-DD)");

        jLabel5.setText("Enter  Assignment Results");

        Insert.setText("Insert");
        Insert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertActionPerformed(evt);
            }
        });

        Update.setText("Update");
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });

        Reset.setText("Reset");
        Reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetActionPerformed(evt);
            }
        });

        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        Back.setText("Back");
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });

        SID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SIDActionPerformed(evt);
            }
        });

        CID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CIDActionPerformed(evt);
            }
        });

        AMD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AMDActionPerformed(evt);
            }
        });

        AMR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AMRActionPerformed(evt);
            }
        });

        SIDC.setText("No more than 6 Numbers");

        CIDC.setText("No more than 4 Numbers");

        AMDC.setText("YYYY-MM-DD");

        AMRC.setText("1-100");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(Insert)
                                .addGap(18, 18, 18)
                                .addComponent(Update)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Reset)
                                .addGap(30, 30, 30)
                                .addComponent(Delete)
                                .addGap(30, 30, 30)
                                .addComponent(Back, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(AMD, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                                .addComponent(CID, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(SID)
                                .addComponent(AMR))
                            .addComponent(SIDC)
                            .addComponent(CIDC)
                            .addComponent(AMDC)
                            .addComponent(AMRC))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(SID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SIDC)
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(CID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)
                        .addComponent(CIDC)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(AMD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AMDC)
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(AMR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AMRC)
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Insert)
                            .addComponent(Update)
                            .addComponent(Reset)
                            .addComponent(Delete)
                            .addComponent(Back)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SIDActionPerformed

    private void CIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CIDActionPerformed

    private void AMDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AMDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AMDActionPerformed

    private void AMRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AMRActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AMRActionPerformed

    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed
        new Menu().setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_BackActionPerformed

    private void InsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertActionPerformed
        if (SID.getText().isEmpty() || CID.getText().isEmpty() || AMD.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please,enter all fields!");
        } else {
            Connection myConn = getConnection();
            String sql = "insert into AssignmentsGradeBook values (?,?,?,?)";

            Pattern pSID = Pattern.compile("\\d{1,6}");
            Matcher mSID = pSID.matcher(SID.getText());
            boolean isSIDValid = mSID.matches();

            Pattern pCID = Pattern.compile("\\d{1,4}");
            Matcher mCID = pCID.matcher(CID.getText());
            boolean isCIDValid = mCID.matches();

            Pattern pAMD = Pattern.compile("^\\d{4}\\-(0?[1-9]|1[012])\\-(0?[1-9]|[12][0-9]|3[01])$");
            Matcher mAMD = pAMD.matcher(AMD.getText());
            boolean isAMDValid = mAMD.matches();

            Pattern pAMR = Pattern.compile("\\d{1,3}");
            Matcher mAMR = pAMR.matcher(AMR.getText());
            boolean isAMRValid = mAMR.matches();

            if (isSIDValid) {
                SIDC.setText("Valid");
                SIDC.setForeground(Color.BLUE);
            } else {
                SIDC.setText("InValid (1 - 6 DECIMAL Only)");
                SIDC.setForeground(Color.red);
            }
            if (isCIDValid) {
                CIDC.setText("Valid");
                CIDC.setForeground(Color.BLUE);
            } else {
                CIDC.setText("InValid (1 - 4 DECIMAL Only)");
                CIDC.setForeground(Color.red);
            }

            if (isAMDValid) {
                AMDC.setText("Valid");
                AMDC.setForeground(Color.BLUE);
            } else {
                AMDC.setText("The Foramating MUST BE YYYY-MM-DD)");
                AMDC.setForeground(Color.red);
            }

            if (isAMRValid) {
                AMRC.setText("Valid");
                AMRC.setForeground(Color.BLUE);
            } else {
                AMRC.setText("Enter number from 0 to 100");
                AMRC.setForeground(Color.red);
            }

            if (isAMRValid && isAMDValid && isCIDValid && isSIDValid) {
                try {
                    PreparedStatement pst = myConn.prepareStatement(sql);
                    pst.setString(1, SID.getText().trim());
                    pst.setString(2, AMD.getText().trim());
                    pst.setString(3, AMR.getText().trim());
                    pst.setString(4, CID.getText().trim());
                    pst.executeUpdate();
                    refreshTableData("Inserted");
                } catch (Exception exc) {
                    exc.printStackTrace();
                }

            }
        }


    }//GEN-LAST:event_InsertActionPerformed

    private void AssignmentTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AssignmentTableMouseClicked
        // Get The Index Of The Slected Row 
        int i = AssignmentTable.getSelectedRow();

        TableModel model = AssignmentTable.getModel();

        // Display Slected Row In JTexteFields
        SID.setText(model.getValueAt(i, 0).toString());

        CID.setText(model.getValueAt(i, 1).toString());

        AMD.setText(model.getValueAt(i, 2).toString());

        AMR.setText(model.getValueAt(i, 3).toString());

    }//GEN-LAST:event_AssignmentTableMouseClicked

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
        if (AMD.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Assignment date CAN NOT BE NULL!!!");
        } else {
            Connection myConn = getConnection();
            String sql = "update AssignmentsGradeBook set StudentID = ?, AssignmentsDate = ?, AssignmentsResults = ? , CoursesID = ? where StudentID = ? and AssignmentsDate = ? and CoursesID = ?";
            Pattern pSID = Pattern.compile("\\d{1,6}");
            Matcher mSID = pSID.matcher(SID.getText());
            boolean isSIDValid = mSID.matches();

            Pattern pCID = Pattern.compile("\\d{1,4}");
            Matcher mCID = pCID.matcher(CID.getText());
            boolean isCIDValid = mCID.matches();

            Pattern pAMD = Pattern.compile("^\\d{4}\\-(0?[1-9]|1[012])\\-(0?[1-9]|[12][0-9]|3[01])$");
            Matcher mAMD = pAMD.matcher(AMD.getText());
            boolean isAMDValid = mAMD.matches();

            Pattern pAMR = Pattern.compile("\\d{1,3}");
            Matcher mAMR = pAMR.matcher(AMR.getText());
            boolean isAMRValid = mAMR.matches();

            if (isSIDValid) {
                SIDC.setText("Valid");
                SIDC.setForeground(Color.BLUE);
            } else {
                SIDC.setText("InValid (1 - 6 DECIMAL Only)");
                SIDC.setForeground(Color.red);
            }
            if (isCIDValid) {
                CIDC.setText("Valid");
                CIDC.setForeground(Color.BLUE);
            } else {
                CIDC.setText("InValid (1 - 4 DECIMAL Only)");
                CIDC.setForeground(Color.red);
            }

            if (isAMDValid) {
                AMDC.setText("Valid");
                AMDC.setForeground(Color.BLUE);
            } else {
                AMDC.setText("The Foramating MUST BE YYYY-MM-DD)");
                AMDC.setForeground(Color.red);
            }

            if (isAMRValid) {
                AMRC.setText("Valid");
                AMRC.setForeground(Color.BLUE);
            } else {
                AMRC.setText("Enter number from 0 to 100");
                AMRC.setForeground(Color.red);
            }

            if (isAMRValid && isAMDValid && isCIDValid && isSIDValid) {
                try {
                    PreparedStatement pst = myConn.prepareStatement(sql);
                    pst.setString(1, SID.getText().trim());
                    pst.setString(2, AMD.getText().trim());
                    pst.setString(3, AMR.getText().trim());
                    pst.setString(4, CID.getText().trim());
                    pst.setString(5, SID.getText().trim());
                    pst.setString(6, AMD.getText().trim());
                    pst.setString(7, CID.getText().trim());
                    pst.executeUpdate();
                    refreshTableData("Updated");
                } catch (Exception exc) {
                    exc.printStackTrace();
                }
            }
    }//GEN-LAST:event_UpdateActionPerformed
    }
    private void ResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetActionPerformed
        CID.setText("");
        SID.setText("");
        AMR.setText("");
        AMD.setText("");
    }//GEN-LAST:event_ResetActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        Connection myConn = getConnection();
        String sql = "Delete From AssignmentsGradeBook WHERE StudentID = ? and AssignmentsDate = ? and CoursesID = ? ";
        try {
            PreparedStatement pst = myConn.prepareStatement(sql);
            pst.setString(1, SID.getText().trim());
            pst.setString(2, AMD.getText().trim());
            pst.setString(3, CID.getText().trim());
            pst.executeUpdate();
            refreshTableData("Deleted!");
        } catch (Exception exc) {
            exc.printStackTrace();
        }
    }//GEN-LAST:event_DeleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddAndEditAssignmentsResults.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddAndEditAssignmentsResults.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddAndEditAssignmentsResults.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddAndEditAssignmentsResults.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddAndEditAssignmentsResults().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AMD;
    private javax.swing.JLabel AMDC;
    private javax.swing.JTextField AMR;
    private javax.swing.JLabel AMRC;
    private javax.swing.JTable AssignmentTable;
    private javax.swing.JButton Back;
    private javax.swing.JTextField CID;
    private javax.swing.JLabel CIDC;
    private javax.swing.JButton Delete;
    private javax.swing.JButton Insert;
    private javax.swing.JButton Reset;
    private javax.swing.JTextField SID;
    private javax.swing.JLabel SIDC;
    private javax.swing.JButton Update;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
