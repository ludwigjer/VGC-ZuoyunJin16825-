/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vgc.zuoyunjin16825;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collections;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @ZuoyunJin16825
 */
public class ManageStudentAttendance extends javax.swing.JFrame implements ProgramInterface{

    public ManageStudentAttendance() {
        initComponents();
        showStudentData();
    }

    public Connection getConnection() {
        try {
            String dbUrl = "jdbc:mysql://localhost:3306/vgc?useSSL=false";
            String userid = "root";
            String userps = "P6agztsg";
            Connection myConn = DriverManager.getConnection(dbUrl, userid, userps);
            return myConn;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public void refreshTableData(String message) {
        // refresh jtable data
        DefaultTableModel model = (DefaultTableModel) studentTable.getModel();
        model.setRowCount(0);
        showStudentData();

        JOptionPane.showMessageDialog(null, "Data " + message + " Succefully");
    }
    String UserID;

    public void getUserID() {
        try {

            FileReader file2 = new FileReader("UserID.txt");
            BufferedReader buffer = new BufferedReader(file2);
            String line;
            while ((line = buffer.readLine()) != null) {
                UserID = line;
            }
            buffer.close();
        } catch (IOException e) {
            System.out.println("A write error has occured");
        }

    }

    public ArrayList<studentData> studentList() {
        getUserID();

        ArrayList<studentData> studentList = new ArrayList();
        Connection myConn = getConnection();
        String sql = "Select student.*,PaymentAndAttendance.Feesowed,PaymentAndAttendance.Attendance,Timetable.FacultyID from ((((Timetable INNER JOIN Courses ON Timetable.CoursesID = Courses.CoursesID) inner join ExamsGradeBook on ExamsGradeBook.CoursesID = Courses.CoursesID) inner join Student on Student.StudentID = ExamsGradeBook.StudentID) inner join PaymentAndAttendance on PaymentAndAttendance.StudentID = Student.StudentID)where FacultyID=" + UserID + " group by StudentID;";
        try {

            Statement myStmt = myConn.createStatement();
            ResultSet myRs = myStmt.executeQuery(sql);
            studentData studentdDataTable;
            while (myRs.next()) {

                studentdDataTable = new studentData(myRs.getInt("StudentID"), myRs.getInt("PhoneNumber"), myRs.getString("StudentFName"), myRs.getString("StudentLName"), myRs.getString("Address"), myRs.getString("EnrollmenttDate"), myRs.getDouble("Feesowed"), myRs.getString("Attendance"));
                studentList.add(studentdDataTable);
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return studentList;
    }

    public void showStudentData() {
        ArrayList<studentData> list = studentList();
        DefaultTableModel model = (DefaultTableModel) studentTable.getModel();
        Object[] row = new Object[8];
        for (int i = 0; i < list.size(); i++) {
            row[0] = list.get(i).getSID();
            row[1] = list.get(i).getSFN();
            row[2] = list.get(i).getSLN();
            row[3] = list.get(i).getSADD();
            row[4] = list.get(i).getSPHONE();
            row[5] = list.get(i).getSED();
            row[6] = list.get(i).getFOWED();
            row[7] = list.get(i).getSAT();
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SID = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        Back = new javax.swing.JButton();
        Update = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        studentTable = new javax.swing.JTable();
        SAT = new javax.swing.JTextField();
        SATC = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add New Students");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Manage Student Attendance Below");

        Back.setText("Back");
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });

        Update.setText("Update");
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });

        studentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "StudentID", "First Name", "last Name", "Address", "Phone No.", "Enrollment Date", "Feesowed", "Attendance"
            }
        ));
        studentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                studentTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(studentTable);

        SAT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SATActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 860, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(254, 254, 254)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(310, 310, 310)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SATC)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(SAT, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Update)
                                .addGap(18, 18, 18)
                                .addComponent(Back, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SAT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Update)
                    .addComponent(Back))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SATC)
                .addContainerGap(53, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed
        new MenuT().setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_BackActionPerformed

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed

        Connection myConn = getConnection();
        String sql = "update PaymentAndAttendance set Attendance = ? WHERE StudentID = ?";

        Pattern pSAT = Pattern.compile("\\d{1,3}\\%");
        Matcher mSAT = pSAT.matcher(SAT.getText());
        boolean isSATValid = mSAT.matches();

        if (isSATValid) {
            SATC.setText("Valid");
            SATC.setForeground(Color.BLUE);
            
            try {
                PreparedStatement pst = myConn.prepareStatement(sql);
                pst.setString(1, SAT.getText().trim());
                pst.setString(2, SID.getText().trim());
                pst.executeUpdate();

                refreshTableData("Updated");
            } catch (Exception exc) {
                exc.printStackTrace();
            }
            
        } else {
            SATC.setText("Number + % Only");
            SATC.setForeground(Color.red);
        }
      
    }//GEN-LAST:event_UpdateActionPerformed

    private void SATActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SATActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SATActionPerformed

    private void studentTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_studentTableMouseClicked

        // Get The Index Of The Slected Row 
        int i = studentTable.getSelectedRow();

        TableModel model = studentTable.getModel();

        // Display Slected Row In JTexteFields
        SID.setText(model.getValueAt(i, 0).toString());
        SAT.setText(model.getValueAt(i, 7).toString());


    }//GEN-LAST:event_studentTableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageStudentAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageStudentAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageStudentAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageStudentAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageStudentAttendance().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back;
    private javax.swing.JTextField SAT;
    private javax.swing.JLabel SATC;
    private javax.swing.JTextField SID;
    private javax.swing.JButton Update;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable studentTable;
    // End of variables declaration//GEN-END:variables

}
